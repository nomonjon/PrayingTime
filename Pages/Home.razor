@page "/"
@using System.Net.Http.Json
@inject HttpClient Http

<PageTitle>Time2Pray</PageTitle>

@inject IJSRuntime JS

<nav class="navbar navbar-expand-lg navbar-dark bg-primary fixed-top" id="app">
    <div class="container-fluid" style="position: relative;">
        <!-- Brand -->
        <a class="navbar-brand h4 mb-0" href="#">
            <h3 class="brand-title">Time2Pray</h3>
        </a>
        <!-- Space Filler -->
        <div class="flex-grow-1"></div>
        <!-- Location Button -->
        <div style="padding-right: 15px;">
            <button type="button" class="btn btn-info btn-rounded shadow-lg" @onclick="GetLocation" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
                @buttonText
            </button>
        </div>
    </div>
</nav>

<div class="container-fluid bg-darkorange text-white"
     style="min-height: 100vh; padding-top: 100px; background-color: rgb(150, 55, 0);" id="app">
    <div class="row justify-content-center align-items-center" style="height: calc(100vh - 200px);">
        <div class="col-lg-4 col-md-12 d-flex justify-content-center"></div>

        <div class="col-lg-4 col-md-12 mb-4 mb-lg-0 text-center">
            <h1 class="display-4 fw-bold text-shadow" style="color: #fff;">Welcome to Time2Pray</h1>
            <h5 class="mt-3 mb-4 text-shadow" style="color: #fff; font-size: 1.2rem;">
                Find out the precise prayer times for your location
            </h5>
            <!-- Use JSInterop to call the scroll function -->
            <button @onclick="ScrollToElement" class="btn btn-lg btn-light shadow-lg rounded-pill align-items-center justify-content-center gap-2">
                <i class="bi bi-arrow-down"></i> Get Prayer Times
            </button>
        </div>

        <div class="col-lg-4 col-md-12 d-flex justify-content-center"></div>
    </div>
</div>

@if (CurrentCity is null)
{
    <h3 id="target" class="text-center mt-5">Praying times in Moscow</h3>
}
else
{
    <h3 id="target" class="text-center mt-5">Praying times in @CurrentCity</h3>
}

@if (timings != null)
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            @foreach (var timing in GetPrayerTimes())
            {
                <div class="col-lg-4 col-md-6 col-sm-12 mb-4">
                    <div class="card p-4" style="background-color: #f8f9fa;">
                        <h4 class="card-title text-center text-dark">@timing.Name</h4>
                        <p class="text-center display-5 text-primary">@timing.Time</p>
                        <h4 class="text-center text-muted">@GetTimeLeft(timing.Time) Left</h4>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    public string? CurrentCity = "Moscow";
    public string? CurrentCountry = "Russia";
    private PrayerTimes? timings;
    private string buttonText = "Find My Location";
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        // Load prayer times for Moscow by default
        await LoadPrayerTimes(CurrentCity, CurrentCountry);
    }

    private async Task LoadPrayerTimes(string city, string country)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse>($"v1/timingsByCity?city={city}&country={country}");
            timings = response?.Data?.Timings;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching prayer times: {ex.Message}");
        }
    }

    private async Task GetLocation()
    {
        try
        {
            buttonText = "Finding Location...";
            isLoading = true;

            var coordinates = await JS.InvokeAsync<Location>("getLocation");

            if (coordinates != null)
            {
                CurrentCity = "Your City"; // Replace with actual API lookup
                CurrentCountry = "Your Country"; // Replace with actual API lookup

                await LoadPrayerTimes(CurrentCity, CurrentCountry);

                buttonText = $"{CurrentCity} / {CurrentCountry}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private IEnumerable<(string Name, string Time)> GetPrayerTimes()
    {
        if (timings == null) yield break;

        yield return ("Bomdod (Fajr)", timings.Fajr);
        yield return ("Peshin (Dhuhr)", timings.Dhuhr);
        yield return ("Asr", timings.Asr);
        yield return ("Shom (Maghrib)", timings.Maghrib);
        yield return ("Xufton (Isha)", timings.Isha);
    }

    private string GetTimeLeft(string? prayerTime)
    {
        if (string.IsNullOrWhiteSpace(prayerTime)) return "00:00:00";

        try
        {
            var now = DateTime.Now;
            var prayerDateTime = DateTime.ParseExact(prayerTime, "HH:mm", null);

            if (prayerDateTime <= now)
                return "00:00:00";

            var timeLeft = prayerDateTime - now;
            return $"{timeLeft.Hours:D2}:{timeLeft.Minutes:D2}:{timeLeft.Seconds:D2}";
        }
        catch
        {
            return "00:00:00";
        }
    }

    public class PrayerTimes
    {
        public string? Fajr { get; set; }
        public string? Dhuhr { get; set; }
        public string? Asr { get; set; }
        public string? Maghrib { get; set; }
        public string? Isha { get; set; }
    }

    public class Data
    {
        public PrayerTimes? Timings { get; set; }
    }

    public class ApiResponse
    {
        public Data? Data { get; set; }
    }

    private class Location
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

    private async Task ScrollToElement()
    {
        await JS.InvokeVoidAsync("scrollToElement");
    }
}
